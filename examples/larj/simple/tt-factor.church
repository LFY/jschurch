(load "tt-common.church")

;; Running "tempered transitions" as a larj-mcmc kernel.

;; The model ===================================================================

(define f1
  (make-factor
    (lambda (x) (norm-eq-log x -2.5 0.1))))

(define f2
  (make-factor
    (lambda (x) (norm-eq-log x 2.5 0.1))))

(define (sample-distr)
  (let* ([smp (gaussian 0 1)]
         [score (if (flipS) (f1 smp) (f2 smp))])
    (list smp score)))

;; Inference algorithms=========================================================

(define (larj-run)
  (larj-mh-query-proposal-count 10000 1 100 (define x (sample-distr)) x true))

(define (mh-run)
  (mh-query 10000 1 (define x (sample-distr)) x true))

;; Parsing arguments and printing===============================================

(define argv (command-line))

(define alg (if (> (length argv) 2)
              (cond [(equal? "larj" (list-ref argv 2)) larj-run]
                  [(equal? "mh" (list-ref argv 2)) mh-run]
                  [else larj-run])
              larj-run))

(define states (alg))

(begin
  (for-each display (map print-state states)))
