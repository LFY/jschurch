;; Running "tempered transitions" as a larj-mcmc kernel.

(define argv (command-line))

;; The model ===================================================================

(define modal-factor
  (make-factor-annealed
    (lambda (x)
      (max (norm-eq-log x -2.5 0.1)
           (norm-eq-log x 2.5 0.1)))))

(define (cause-structural-change) (flipS))

(define (sample-distr)
  (let* ([v (cause-structural-change)]
         [smp (gaussian 0 1)]
         [score (modal-factor smp)])
    (list smp score)))

;; Inference algorithms=========================================================

(define (larj-run)
  (larj-mh-query-proposal-count 10000 1 100 (define x (sample-distr)) x true))

(define (mh-run)
  (mh-query 10000 1 (define x (sample-distr)) x true))

;; Parsing arguments and printing===============================================

(define alg (if (> (length argv) 2)
              (cond [(equal? "larj" (list-ref argv 2)) larj-run]
                  [(equal? "mh" (list-ref argv 2)) mh-run]
                  [else larj-run])
              larj-run))

(define states (alg))

(define (print-state smp-score)
  (let* ([smp (number->string (first smp-score))]
         [score (number->string (second smp-score))])
    (string-append
      "state " smp " score " score)))

(begin
  (for-each display (map print-state states)))
