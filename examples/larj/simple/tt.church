(load "tt-common.church")

;; Running "tempered transitions" as a larj-mcmc kernel.


;; The model ===================================================================

(define modal-factor
  (make-factor-annealed
    (lambda (x)
      (max (norm-eq-log x -2.5 0.1)
           (norm-eq-log x 2.5 0.1)))))

(define (cause-structural-change) (flipS))

(define (sample-distr)
  (let* ([v (cause-structural-change)]
         [smp (gaussian 0 1)]
         [score (modal-factor smp)])
    (list smp score)))

;; Inference algorithms=========================================================

(define (larj-run num-props anneal-steps)
  (larj-mh-query-proposal-count num-props 1 anneal-steps (define x (sample-distr)) x true))

(define (mh-run num-props)
  (mh-query num-props 1 (define x (sample-distr)) x true))

;; Parsing arguments============================================================

(define argv (command-line))

(define alg (if (> (length argv) 2)
              (cond [(equal? "larj" (list-ref argv 2)) larj-run]
                  [(equal? "mh" (list-ref argv 2)) mh-run]
                  [else larj-run])
              larj-run))

(define num-props (if (> (length argv) 3) (string->number (list-ref argv 3)) 10000))
(define anneal-steps (if (> (length argv) 4) (string->number (list-ref argv 4)) 100))

(define states (alg num-props anneal-steps))

(begin
  (for-each display (map print-state states)))
