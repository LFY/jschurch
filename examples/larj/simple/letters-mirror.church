;; Running "tempered transitions" as a larj-mcmc kernel.

;; Our evaluation metric is sign changes; church-mh cannot do sign changes
;; (find the modes) as well as la-church can.

(define f1
  (make-factor (lambda (x)
                 (if x 0.0 (log 0.001)))))

(define f2
  (make-factor (lambda (x y)
                 (if (eq? x y) 0.0 (log 0.001)))))

(define pair-not-eq
  (make-factor (lambda (x y) (if (eq? x y) (log 0.01) 0.0))))

(define (count-changes lst)
  (let loop ([start (first lst)]
             [lst (rest lst)])
    (if (null? lst)
        0
        (if (equal? start (first lst))
            (loop start (rest lst))
            (+ 1 (loop (first lst) (rest lst)))))))

(begin
  (enable-larj-log)
  (let* ([results 
           (larj-mh-query-proposal-count 50000 1 10000
           ;;(mh-query 10000 1
                     (define res
                       (let* ([smps (repeat (+ 3 (sample-integer-shiftS 3)) (lambda () (sample-integer 2)))]
                              [first-half (take smps (floor (/ (length smps) 2)))]
                              [second-half (take (reverse smps) (floor (/ (length smps) 2)))]
                              [not-eq-constr (map (lambda (xy) (apply pair-not-eq xy))
                                                  (bi-gram first-half))]
                              [not-eq-constr2 (map (lambda (xy) (apply pair-not-eq xy))
                                                  (bi-gram second-half))]
                              )

                         (list (length smps)
                               (+ 
                                 (apply + (map (lambda (x y) (f2 x y)) first-half second-half))
                                 (apply + not-eq-constr)
                                 (apply + not-eq-constr2)
                                 )
                               smps)))
                     res true)])
    5))
