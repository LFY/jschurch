(load "tt-common.church")

;; The model====================================================================

(define soft-eq
  (make-factor (lambda (x y)
    (norm-eq-log x y 0.1))))

(define (run-distr)
  (let* ([which-distr (flipS)]
         [pts (repeat (if which-distr 1 2) (lambda () (gaussian 0 1)))]
         [constr
           (if which-distr
             (list (soft-eq 0.0 (first pts)))
             (list
               (soft-eq 2.5 (first pts))
               (soft-eq -2.5 (second pts))))])
    (list pts (apply + constr))))

;; Inference algorithms=========================================================

(define (larj-run props steps)
  (larj-mh-query-generic 'structural
                         props 
                         1
                         steps
                                (define res (run-distr))    
                                res
                                true))
(define (mh-run props steps)
  (mh-query props 1 (define res (run-distr)) res true)) 

;; Parsing arguments============================================================

(define argv (command-line))

(define alg (if (> (length argv) 2)
              (cond [(equal? "larj" (list-ref argv 2)) larj-run]
                  [(equal? "mh" (list-ref argv 2)) mh-run]
                  [else larj-run])
              larj-run))

(define num-props (if (> (length argv) 3) (string->number (list-ref argv 3)) 10000))
(define anneal-steps (if (> (length argv) 4) (string->number (list-ref argv 4)) 100))

(define states (alg num-props anneal-steps))

(begin
  (for-each display (map print-state states)))


