;; Compared to rejection and mh, larj seems to be systematically
;; biased in the first coordinate for the 3d coefficient space.
;;
;;
;; REJECTION
;; 
;; 1000 rejection samples, 110s per run:
;; (403 (715 285) ((0.6457272594588271 -0.4526573149113678) (-0.5777726528073759 -0.48444188276151284 0.3108906855339066))) :: 2.5
;; (420 (709 291) ((0.5846400382766487 -0.4226484541653095) (-0.6670218536835485 -0.44429312591149034 0.3262621060530964))) :: 2.0
;;                                                           ^
;;
;; MH
;; 
;; mh 10.000/10, 30s per run:
;; (2692 (6966 3034) ((0.5620185425857667 -0.41780874048574584) (-0.653621086559955 -0.42541976674364557 0.31516407351552395))) :: 2.29
;; (2694 (6979 3021) ((0.5577819326790483 -0.37835155394436065) (-0.6386679006188464 -0.42098477314914945 0.3157335292834497))) :: 2.31
;; (2639 (7104 2896) ((0.5939691099945494 -0.37809061396528165) (-0.6658194447750465 -0.4196039683928567 0.3203679899341263))) :: 2.45
;;                                                               ^
;;
;; mh 20.000/10, 67s per run:
;; (5277 (14076 5924) ((0.5451337392639658 -0.3919659447160972) (-0.6959561207523669 -0.42701904239892674 0.3245168598067748)))  :: 2.376
;;                                                               ^
;;
;; mh 3.000/100:
;; (1259 (2123 877) ((0.5795220665440695 -0.38887118936738163) (-0.6342824265033281 -0.4059393316475246 0.31538625439939205))) :: 2.42
;;                                                              ^
;;
;; LARJ
;; 
;; 200.000/10/10 larj-proposal-count samples, 138s per run:
;; (1377 (14269 5731) ((0.4619117363746069 -0.4129346965014383) (-1.0180992113837075 -0.4251662268783137 0.33537048775059297))) :: 2.5
;;                                                               ^
;; 200.000/10/500 larj-proposal-count samples, 130s per run:
;; (9 (285 115) ((0.9998205194563052 0.019565712454310807) (-1.241431882556987 -0.4833337003828964 0.3515686300173207)))
;;                                                          ^
;; 200.000/10/10000 larj-proposal-count samples, 136s per run:
;; (1 (19 1) ((-0.08232679281820048 0.542097425764915) (-0.9822554450444608 -1.3542476283260718 1.6753929718674583)))
;;                                                      ^
;; 20.000/10/5 larj-proposal-count samples, 15s per run:
;; (465 (2643 1357) ((0.9590639623223285 -0.4279125437739269) (-1.0385551709385288 -0.47416642189183594 0.34034220113051245)))
;;                                                             ^

(define x-vals '(-5 -4 -3 -2 -1 0 1 2 3 4 5))

(define (make-poly c)
  (lambda (x) (apply + (map (lambda (a b) (* a (expt x b)))
                       c
                       (iota (length c))))))

(define true-observations
  (list 10.229278134620932 6.412978128005648 3.341257367949409
        1.0141158544522146 -0.5684464124859345 -1.406429432865039
        -1.499833206685099 -0.8486577339461141 0.5470969853519159
        2.68743095120899 5.572344163625109))

(define SOFTNESS 10)

(define (make-factors hyp-ys true-ys)
  (begin
    (map (lambda (y-val obs-y-val)
           (logprob-factor (- (/ (abs (- y-val obs-y-val)) SOFTNESS))))
         hyp-ys true-ys)
    true))

(define logprob-factor
  (make-factor-annealed
   (lambda (x) x)))

(define (count-changes lst)
  (let loop ([start (first lst)]
             [lst (rest lst)])
    (if (null? lst)
        0
        (if (eq? start (first lst))
            (loop start (rest lst))
            (+ 1 (loop (first lst) (rest lst)))))))

(define (all-means xs)
  (map (lambda (i) (mean (map (lambda (x) (list-ref x i))
                         xs)))
       (iota (length (first xs)))))

(define (mean-coefficients xs)
  (list (all-means (filter (lambda (xi) (= (length xi) 2))
                           xs))
        (all-means (filter (lambda (xi) (= (length xi) 3))
                           xs))))

(define samples

  ;; (repeat
  ;;  1000
  ;;  (lambda ()
  ;;    (factor-rejection-query

  (larj-mh-query-proposal-count
   ;; (mh-query

   %(samples)s 10 5

   (define bdim (flipS))
   
   (define coefficients
     (repeat (if bdim 2 3)
             (lambda () (gaussian 0 2))))

   (define observations
     (map (make-poly coefficients) x-vals))

   (list bdim coefficients)

   (make-factors observations true-observations)))

;; (display samples)

(define (count-dimensions xs)
  (list (length (filter (lambda (x) x) xs))
        (length (filter (lambda (x) (not x)) xs))))

(list (count-changes (map first samples))
      (count-dimensions (map first samples))
      (mean-coefficients (map second samples)))
