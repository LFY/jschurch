

(define my-pi 3.141592653589793238)

;;
;; Built-in scope-constructor helper functions
;;

(define (drop-last xs)
  (reverse (cdr (reverse xs))))

(define (bi-gram xs)
    (zip (drop-last xs) (cdr xs)))

(define (circular-bi-gram xs)
    (zip xs (append (cdr xs) (list (car xs)))))

;; messy bi-gram-skip

(define (bi-gram-skip n xs)
  (letrec ([look-ahead (lambda (n xs) (if (= n 0) xs
                                        (look-ahead (- n 1) (cdr xs))))]
           [loop (lambda (acc n xs)
                   (let* ([ahead (look-ahead (+ n 1) xs)])
                     (cond [(null? ahead) acc]
                           [else
                             (loop (cons (cons (car xs) (list (car ahead))) acc)
                                   n (cdr xs))])))])
  (cond [(< (length xs) (+ n 1)) '()]
        [else (loop '() n xs)])))

;; pairs [] = []
;; pairs [x] = []
;; pairs (x:xs) = [(x, y) | y <- xs] ++ pairs xs

(define (pairs xs)
  (cond [(null? xs) '()]
        [(null? (cdr xs)) '()]
        [else
          (append (map (lambda (i) (list (car xs) i)) (cdr xs))
                  (pairs (cdr xs)))]))
;; 
;; Built-in factors
;;
(define (gauss-log-pdf mean var smp)
  (let ([diff (- smp mean)])
    (- 
      (- (/ (* diff diff) (* 2.0 var)))
      (* 0.5 (+ (log 2) (log my-pi) (log var)))
      )))

(define (norm-gauss-log-pdf mean var smp)
  (- (gauss-log-pdf mean var smp) (gauss-log-pdf mean var mean)))

(define softeq
  (make-factor
    (lambda (x y) (norm-gauss-log-pdf x 0.1 y))))

