;; --------------------------------------------------------------------
;; Rejection

(define (factor-rejection-query nfqp)
  (let loop ()
    (let* ([init-state (church-make-initial-mcmc-state '(TOP) (make-empty-store))]
           [proposed-state (first (counterfactual-update init-state nfqp))]
           [factors (store->factors (mcmc-state->store proposed-state))]
           [state-score (apply + (map factor-value (addbox->values factors)))]
           [cond-box (second proposed-state)])
      (if (and (not (equal? (mcmc-state->score-generic proposed-state) minus-infinity))
               (log-flip state-score))
          (mcmc-state->query-value proposed-state)
          (loop)))))

;; --------------------------------------------------------------------
;; MH

(define (mh-query samples lag normal-form-proc)
  (mh-query* samples lag normal-form-proc))

(define (mh-query/annealed-init temps samples lag rej-steps temps->nfqp)
  (mh-query* temps samples lag rej-steps temps->nfqp))

(define (non-structural-mh-query samples lag normal-form-proc)
  (non-structural-mh-query* samples lag normal-form-proc))

;; --------------------------------------------------------------------
;; LARJ

(define (larj-mh-query+power samples lag num-temps power normal-form-proc)
  (larj-mh-query+power* samples lag num-temps power normal-form-proc))

(define (larj-mh-query samples lag num-temps normal-form-proc)
  (larj-mh-query* samples lag num-temps normal-form-proc))

(define (larj-mh-query-proposal-count+power num-proposals-to-make lag num-temps power normal-form-proc)
  (larj-mh-query-proposal-count+power* num-proposals-to-make lag num-temps power normal-form-proc))

(define (larj-mh-query-proposal-count num-proposals-to-make lag num-temps normal-form-proc)
  (larj-mh-query-proposal-count* num-proposals-to-make lag num-temps normal-form-proc))