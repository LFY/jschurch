;; authors: noah goodman (with help from jeff siskind, andreas stuhlmuller)

;;this is the church xrp-preamble, that creates all standard xrps. some primitive pieces (samplers, scorers) are added in the scheme header.

;;for constructing 'erp-like' xrps that don't have any hyperparams or stats.

(define (make-stateless-structural-xrp xrp-name sampler scorer . proposal-support)
  (make-structural-xrp xrp-name
            (lambda (stats hyperparams args) ;;sample
              (let* ((value (apply sampler args))
                     (value (if (and (*with-score-gradient*) (continuous? value)) (tapify (untapify value)) value)))
                (list value stats (scorer args value))))
            (lambda (value stats hyperparams args) ;;incr-stats
              (let ((value (if (and (*with-score-gradient*) (continuous? value)) (tapify (untapify value)) value)))
                (list value stats (scorer args value))))
            (lambda (value stats hyperparams args) ;;decr-stats
              (let ((value (if (and (*with-score-gradient*) (continuous? value)) (tapify (untapify value)) value)))
                (list value stats (scorer args value))))
            'scorer;;FIXME
            '() ;;init-stats
            '() ;;hyperparams
            (if (null? proposal-support) '() (first proposal-support))
            (if (null? proposal-support) '() (if (null? (rest proposal-support))
                                                 '()
                                                 (let ((pr (second proposal-support))) (lambda (stats hyperparams args) (pr args)))))))

(define flipS (make-stateless-structural-xrp 
                'flipS
                (lambda w  (if (null? w) (< (random-real) 0.5) (< (random-real) (car w)) ))
                (lambda (args val) (if (null? args) (- (log 2.0)) (if val (log (first args)) (log (- 1 (first args))) )))
                (lambda (ops old-val)
                  (let* ([p (if (null? ops) 0.5 (first ops))]
                         [new-val (not old-val)]
                         [correction 0.0])
                    (list new-val correction correction)))
                (lambda (args) (list true false)) ;;FIXME: check if prob is 0 or 1.
                ))

(define log-flipS (make-stateless-structural-xrp
                   'log-flipS
                                     (lambda w (if (null? w)
                                                   (< (random-real) 0.5)
                                                   (< (log (random-real)) (car w))))
                                     (lambda (args val)
                                       (if (null? args)
                                           (- (log 2.0))
                                           (if val
                                               (first args)
                                               (log (- 1.0 (exp (first args)))) )))))

(define dirichletS (make-stateless-structural-xrp
                    'dirichletS sample-dirichlet
                                      (lambda (args val)
                                        (dirichlet-lnpdf (first args) val))
                                      ))

(define sample-discreteS (make-stateless-structural-xrp
                          'sample-discreteS
                                            discrete-sampler
                                            (lambda (args val)
                                              (if (>= val (length (first args)))
                                                  minus-infinity
                                                  (let ((p (discrete-pdf (first args) val)))
                                                    (if (> p 0) (log p) minus-infinity))))
                                            '() ;;proposer
                                            (lambda (args) (iota (length (first args))))
                                            ))

(define sample-integerS (make-stateless-structural-xrp
                         'sample-integerS
                                           random-integer
                                           (lambda (args val)
                                             (let ((n (first args)))
                                               (if (and (integer? val)
                                                        (>= val 0)
                                                        (< val n))
                                                   (- (log n))
                                                   minus-infinity)))
                                           '();;proposer
                                           (lambda (args) (iota (first args)))
                                           ))

(define sample-integer-shiftS (make-stateless-structural-xrp
                         'sample-integer-shiftS
                                           random-integer
                                           (lambda (args val)
                                             (let ((n (first args)))
                                               (if (and (integer? val)
                                                        (>= val 0)
                                                        (< val n))
                                                   (- (log n))
                                                   minus-infinity)))
                                           (lambda (ops old-val)
                                             (let* ([max-val (first ops)])
                                               (cond 
                                                 [(= 0 old-val) (list 1 (log 1.0) (log 0.5))]
                                                 [(= max-val old-val) (list (- max-val 1) (log 1.0) (log 0.5))]
                                                 [else
                                                   (list (+
                                                           (if (= 0 (random-integer 2))
                                                           1 -1)
                                                           old-val)
                                                         (log 0.5) (log 0.5))])))
                                           (lambda (args) (iota (first args)))
                                           ))

(define uniformS (make-stateless-structural-xrp
                  'uniformS
                                    (lambda (a b) (+ (* (- b a) (random-real)) a))
                                    (lambda (args val)
                                      (let ((a (first args))
                                            (b (second args)) )
                                        (if (or (< val a)
                                                (> val b))
                                            minus-infinity
                                            (- (log (- b a))) )))))

(define exponentialS (make-stateless-structural-xrp
                      'exponentialS
                                        (lambda (inv-mean)
                                          (- (/ (log (random-real)) inv-mean)) )
                                        (lambda (args val) ;; returns density
                                          (if (< val 0)
                                              minus-infinity
                                              (let ((inv-mean (first args)))
                                                (+ (log inv-mean) (- (* inv-mean val))) )))))

(define gaussianS (make-stateless-structural-xrp
                    'gaussianS
                    (lambda args (sample-gaussian (first args) (second args)))
                    (lambda (args val) (log (gaussian-pdf val (first args) (second args))))
                    (lambda (ops old-val)
                      (let* ([mean (first ops)]
                             [var (second ops)]
                             [new-val (+ old-val (sample-gaussian 0 var))]
                             [correction (log (gaussian-pdf new-val old-val var))])
                        (list new-val correction correction)))
                    ))

(define gensymS (make-stateless-structural-xrp
                 'gensymS
                                   (lambda prefix (apply scheme-gensym prefix))
                                   (lambda (args val) (log 0.9)))) ;;FIXME!! gensym should be sad if two draws with different addresses are eq?

;;;permutations
(define random-permutationS (make-stateless-structural-xrp
                             'random-permutationS
                                               (lambda (len)
                                                 ;; implements fisher-yates-knuth
                                                 (let loop ((perm (iota len))
                                                            (n (- len 1)))
                                                   (if (= n 0)
                                                       perm
                                                       (let ((k (sample-integerS (+ n 1))))
                                                         (loop (putS (putS perm k (list-ref perm n)) n (list-ref perm k))
                                                               (- n 1))))))
                                               (lambda (args val)
                                                 (let ((len (first args)))
                                                   (if (= len (length val)) ;; only a weak sanity check
                                                       (- (lnfact len))
                                                       (log 0) )))))
(define (putS lst ind elt) (append (take lst ind) (list elt) (drop lst (+ 1 ind)))) ;;Oh, so slow!

(define (permuteS lst) (map (lambda (ind) (list-ref lst ind)) (random-permutationS (length lst))))

(define (make-dirichlet-discreteS hyp) (make-structural-xrp 'dirichlet-discreteS
                                                (lambda (stats hyperparams args) ;;sampler
                                                  (let* ((counts (map + stats hyperparams))
                                                         (total-counts (apply + counts))
                                                         (probs (map (lambda (c) (/ c total-counts)) counts))
                                                         (value (sample-discrete probs))
                                                         (new-stats (append (take stats value)
                                                                            (list (+ 1 (list-ref stats value)))
                                                                            (drop stats (+ 1 value)))))
                                                    (list value new-stats (log (list-ref probs value)))))
                                                (lambda (value stats hyperparams args) ;;incr-stats
                                                  (list value
                                                        (append (take stats value)
                                                                (list (+ (list-ref stats value) 1))
                                                                (drop stats (+ 1 value)))
                                                        (- (log (+ (list-ref stats value) (list-ref hyperparams value)))
                                                           (log (+ (apply + stats) (apply + hyperparams))))))
                                                (lambda (value stats hyperparams args) ;;decr-stats
                                                  (list value
                                                        (append (take stats value)
                                                                (list (- (list-ref stats value) 1))
                                                                (drop stats (+ 1 value)))
                                                        (+ (log (+ -1 (list-ref stats value) (list-ref hyperparams value)))
                                                           (- (log (+ -1 (apply + stats) (apply + hyperparams)))))))
                                                'dirichlet-discrete-scorer  ;;FIXME. this isn't currently used, but may be for incremental method (on hyperparams change).
                                                (make-list (length hyp) 0.0)
                                                hyp
                                                '();dirichlet-discrete-uniform-proposer
                                                (lambda (stats hyperparams args) (iota (length hyperparams))) ;;support -- doesn't handle zero prob entries.
                                                ))

(define (make-beta-binomialS alpha beta)
  (let ((dd (make-dirichlet-discreteS (list alpha beta))))
    (lambda () (= (dd) 1))))

(define (make-symmetric-dirichlet-discreteS N hyp) (make-dirichlet-discreteS (make-list N hyp)))

(define (make-CRPS alpha . opt) (make-structural-xrp 'CRPS
                                   (lambda (stats hyperparam args) ;;sampler
                                     (let* ((count-map stats)
                                            (counts (pair hyperparam (map rest count-map)))
                                            (total-counts (apply + counts))
                                            (probs (map (lambda (c) (/ c total-counts)) counts))
                                            (table-index (sample-discrete probs))
                                            ;(d-hyp (begin (display "[crp:hyperparam] ") (display hyperparam) (display "\n") ))
                                            ;(d-stat (begin (display "[crp:stats] ") (display stats) (display "\n") ))
                                            ;(d-args (begin (display "[crp:args] ") (display args) (display "\n") ))
                                            )
                                       (if (member 'stickemup args) (list count-map count-map (list-ref probs table-index)) ; CHANGEDBYLONG
                                       (if (= table-index 0)
                                           ;;this customer sits at a new table:
                                           (let* ((table-symbol (gensym));(make-table-label))
                                                  (new-count-map ;(sort-stats
                                                                  (pair (pair table-symbol 1) count-map)))
                                             (list table-symbol
                                                   new-count-map
                                                   (list-ref probs table-index) ))
                                           ;;this customer sits at an existing table:
                                           (let* ((table-symbol (first (list-ref count-map (- table-index 1))))
                                                  (table-count (+ 1 (rest (list-ref count-map (- table-index 1)))))
                                                  (new-count-map ;(sort-stats
                                                                  (append (take count-map (- table-index 1))
                                                                          (list (pair table-symbol table-count))
                                                                          (drop count-map table-index))))
                                             (list table-symbol
                                                   new-count-map
                                                   (list-ref probs table-index)))
                                           ))))
                                   (lambda (value stats hyperparam args) ;;incr-stats
                                     (let* ((count-map stats)
                                            (counts (pair hyperparam (map rest count-map)))
                                            (total-counts (apply + counts))
                                            (probs (map (lambda (c) (/ c total-counts)) counts))
                                            (table-index (list-index (lambda (c) (eq? value (first c))) count-map)))
                                       (if (eq? false table-index)
                                           ;;this value is a new table:
                                           (list value
                                                 ;(sort-stats
                                                  (pair (pair value 1) count-map)
                                                 (list-ref probs 0))
                                           ;;this value is an existing table:
                                           (let* ((table-count (rest (list-ref count-map table-index)))
                                                  (new-table-count (+ table-count 1))
                                                  (new-count-map ;(sort-stats
                                                                  (append (take count-map table-index)
                                                                          (list (pair value new-table-count))
                                                                          (drop count-map (+ 1 table-index)))))
                                             (list value
                                                   new-count-map
                                                   (list-ref probs table-index)) ))))
                                   (lambda (value stats hyperparam args) ;;decr-stats
                                     (let* ((count-map stats)
                                            (counts (map rest count-map))
                                            (table-index (list-index (lambda (c) (eq? value (first c))) count-map)))
                                       (if (eq? false table-index)
                                           ;;this value not found, can't decr it:
                                           (error table-index "can't decr a value from CRP that doesn't label any table!")
                                           ;;this value is an existing table:
                                           (let* ((table-count (rest (list-ref count-map table-index)))
                                                  (new-table-count (- table-count 1))
                                                  (new-count-map ;(sort-stats
                                                                  (if (= 0 new-table-count)
                                                                      (append (take count-map table-index)
                                                                              (drop count-map (+ 1 table-index)))
                                                                      (append (take count-map table-index)
                                                                              (list (pair value new-table-count))
                                                                              (drop count-map (+ 1 table-index))))))
                                             (list value
                                                   new-count-map
                                                   (if (= 0 new-table-count)
                                                       (/ hyperparam (+ hyperparam (apply + counts) (- 1)))
                                                       (/ new-table-count (+ hyperparam (apply + counts) (- 1)))))))))
                                   'CRP-scorer
                                   (if (null? opt) '() (first opt))
                                   alpha
                                   '();CRP-uniform-proposer
                                   '();CRP-support
                                   ))

;;this is a version of DPmem using the crp representation:
(define (DPmemS alpha proc)
  (let ((augmented-proc (mem (lambda (args part) (apply proc args))))
        (crps (mem (lambda (args) (make-CRPS alpha)))))
    (lambda argsin (augmented-proc argsin ((crps argsin))))))

(define (robbable-DPmemS alpha proc)
  (let ((augmented-proc (mem (lambda (args part) (apply proc args))))
        (crps (mem (lambda (args) (make-CRPS alpha)))))
    (lambda argsin
      (if (member 'stickemup argsin)
          (let ((args (remove 'stickemup argsin)))
               (map
                (lambda (table) (list (augmented-proc args (car table) ) (cdr table) ))
                ((crps args) 'stickemup) ) )
      (augmented-proc argsin ((crps argsin)))))) )
