
(define (tr-map f xs)
  (if (null? xs) '()
    (tr-cons (f (tr-car xs)) (tr-map f (tr-cdr xs)))))

(define (tr-zipN xss)
  (if (null? (tr-car xss)) '()
    (tr-cons (tr-map (lambda (x) (tr-car x)) xss)
             (tr-zipN (tr-map (lambda (x) (tr-cdr x)) xss)))))

(define (tr-zip xs ys)
  (if (null? xs) '()
    (tr-cons (tr-list (tr-car xs) (tr-car ys))
             (tr-zip (tr-cdr xs) (tr-cdr ys)))))

(define (tr-zip3 xs ys zs)
  (tr-zipN (tr-list xs ys zs)))

(define (tr-zip4 xs ys zs ws)
  (tr-zipN (tr-list xs ys zs ws)))

(define (tr-zip5 xs ys zs ws ss)
  (tr-zipN (tr-list xs ys zs ws ss)))

(define (tr-filter f xs)
  (cond [(null? xs) '()]
        [(f (tr-car xs)) (tr-cons (tr-car xs) (tr-filter f (tr-cdr xs)))]
        [else (tr-filter f (tr-cdr xs))]))


