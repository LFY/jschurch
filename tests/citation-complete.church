;;;;; @Package     levenshtein
;;; @Subtitle    Levenshtein Distance Metric in Scheme
;;; @HomePage    http://www.neilvandyke.org/levenshtein-scheme/
;;; @Author      Neil Van Dyke
;;; @Version     0.6
;;; @Date        2009-03-14
;;; @PLaneT      neil/levenshtein:1:3

(define (%identity x) x)

(define (%string-empty? v) (zero? (string-length v)))
(define (%vector-empty? v) (zero? (vector-length v)))

(define (%string->vector s)
  (list->vector (string->list s)))

(define (vector-levenshtein/predicate/get-scratch a b pred get-scratch)
  (let ((a-len (vector-length a))
        (b-len (vector-length b)))
    (cond ((zero? a-len) b-len)
          ((zero? b-len) a-len)
          (else
            (let ((w    (get-scratch (+ 1 b-len)))
                  (next #f))
              (let fill ((k b-len))
                (vector-set! w k k)
                (or (zero? k) (fill (- k 1))))
              (let loop-i ((i 0))
                (if (= i a-len)
                  next
                  (let ((a-i (vector-ref a i)))
                    (let loop-j ((j   0)
                                 (cur (+ 1 i)))
                      (if (= j b-len)
                        (begin (vector-set! w b-len next)
                               (loop-i (+ 1 i)))
                        ;; TODO: Make these costs parameters.
                        (begin (set! next (min (+ 1 (vector-ref w (+ 1 j)))
                                               (+ 1 cur)
                                               (if (pred a-i
                                                         (vector-ref b j))
                                                 (vector-ref w j)
                                                 (+ 1 (vector-ref w j)))))
                               (vector-set! w j cur)
                               (loop-j (+ 1 j) next))))))))))))

(define (vector-levenshtein/predicate a b pred)
  (vector-levenshtein/predicate/get-scratch a b pred make-vector))

(define (vector-levenshtein/eq    a b)
  (vector-levenshtein/predicate a b eq?))
(define (vector-levenshtein/eqv   a b)
  (vector-levenshtein/predicate a b eqv?))
(define (vector-levenshtein/equal a b)
  (vector-levenshtein/predicate a b equal?))

(define (vector-levenshtein a b) (vector-levenshtein/equal a b))

(define (list-levenshtein/predicate a b pred)
  (cond ((null? a) (length b))
        ((null? b) (length a))
        (else (vector-levenshtein/predicate (list->vector a)
                                            (list->vector b)
                                            pred))))

(define (list-levenshtein/eq    a b) (list-levenshtein/predicate a b eq?))
(define (list-levenshtein/eqv   a b) (list-levenshtein/predicate a b eqv?))
(define (list-levenshtein/equal a b) (list-levenshtein/predicate a b equal?))

(define (list-levenshtein       a b) (list-levenshtein/equal     a b))


(define (string-levenshtein a b)
  ;; TODO: Maybe make a version that doesn't convert to vectors but also
  ;;       doesn't do lots of string-refs.
  (cond ((zero? (string-length a)) (string-length b))
        ((zero? (string-length b)) (string-length a))
        (else (vector-levenshtein/eqv
                (%string->vector a)
                (%string->vector b)))))

(define (%string-levenshtein/predicate a b pred)
  (cond ((zero? (string-length a)) (string-length b))
        ((zero? (string-length b)) (string-length a))
        (else (vector-levenshtein/predicate
                (%string->vector a)
                (%string->vector b)
                pred))))


(define levenshtein/predicate
  ;; TODO: Change this to a let-syntax.
  (let ((foo (lambda (a b pred a-emp a-len a-vec)
               (let ((bar (lambda (b-emp b-len b-vec)
                            (if (b-emp b)
                              (a-len a)
                              (vector-levenshtein/predicate (a-vec a)
                                                            (b-vec b)
                                                            pred)))))
                 (cond ((vector? b) (bar %vector-empty?
                                         vector-length
                                         %identity))
                       ((string? b) (bar %string-empty?
                                         string-length
                                         %string->vector))
                       ((list?   b) (bar null? length list->vector))
                       (else (error "term 2 must be vector, list, or string:"
                                    b)))))))
    (lambda (a b pred)
      (cond ((vector? a) (if (vector? b)
                           (vector-levenshtein/predicate a b pred)
                           (foo a b pred
                                %vector-empty?
                                vector-length
                                %identity)))
            ((string? a) (if (string? b)
                           (%string-levenshtein/predicate
                             a b pred)
                           (foo a b pred
                                %string-empty?
                                string-length
                                %string->vector)))
            ((list?   a) (if (list? b)
                           (list-levenshtein/predicate a b pred)
                           (foo a b pred null? length list->vector)))
            (else (error "term 1 must be vector, list, or string:" a))))))


(define (levenshtein a b)
  (if (and (string? a) (string? b))
    (string-levenshtein a b)
    (levenshtein/predicate a b equal?)))




;;; Citation Classes
;;; class: author-as-cited

(define make-author-as-cited list)              ;;not actual authors, this is the author name appeared in citation
(define author-as-cited->firstname first)
(define author-as-cited->middlename second)
(define author-as-cited->lastname third)

(define (parse-author author)
  (let* (
         (firstname (first author))
         (middlename (second author))
         (lastname (third author))
         )
    (make-author-as-cited firstname middlename lastname)))

(define (parse-authors authors-as-cited)
  (map parse-author authors-as-cited) 
  )


;;; class: paper
(define make-paper list)
(define paper->num-authors first)      
(define paper->authors second) 
(define (paper->title p)
  (car (third p)))      
(define paper->pub-type fourth)
(define paper->text fifth)
(define paper->paper-id sixth)

;;; class: citation

(define make-citation list)
(define citation->num-obs-authors first)      
(define citation->obs-authors second) 
(define (citation->obs-title c)
  (car (third c)))      
(define citation->obs-pub-type fourth)      
(define citation->text fifth)
(define citation->paper-id sixth)

(define (parse-citation obs-citation default-id)
  (let* (
         (obs-authors (parse-authors (first obs-citation)))
         (obs-title (second obs-citation))
         (obs-pub-type '("default"))
         (num-obs-authors (length obs-authors))
         (paper-id default-id)
         )
    (make-citation num-obs-authors obs-authors obs-title obs-pub-type '() paper-id)
    ))



;;; Citation Data

(define all-citations '(
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate versus univariate decision trees")     )
                        ((("Carla" "E" "Brodley") ("Paul" "E" "Utgoff")) ("Multivariate versus univariate decision trees")     )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate versus univariate decision trees   Coins")     )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate Versus Univariate Decision Trees")    )
                        ;;((("C" "E" "Brodley") ("P" "E" "Ut-goff")) ("Multivariate versus univariate decision trees")     )
                        ;;((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate Versus Univariate Decision Trees")    )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Goal-directed Classification Using Linear Machine Decision Trees")   )
                        ;;((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Goal-directed Classification Using Linear Machine Decision Trees")   )
                        ((("C" "E" "Brodley") ("P" "E" "Ut-goff")) ("Goal-directed Classification Using Linear Machine Decision Trees")    )
                        ((("Carla" "E" "Brodley") ("Paul" "E" "Utgoff")) ("Multivariate decision trees")     )
                        ;;((("Carla" "E" "Brodley") ("Paul" "E" "Utgoff")) ("Multivariate decision trees")     )
                        ;;((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate decision trees")  )
                        ((("A" "B" "Brodley") ("P" "E" "Utgoff")) ("Multivariate versus univariate decision trees")     )
                        ))
(define author-sets 
  (delete-duplicates (map car all-citations)))

(define title-sets 
  (delete-duplicates (map cadr all-citations)))

(define (initialization all-citations)
  (map  parse-citation all-citations (iota (length all-citations))))

(define citations 
  (initialization all-citations))


;;; Utility functions
;;;
(define (randintS low high)
  (+ low (sample-integerS (- high low))))

(define (randint low high)
  (+ low (sample-integer (- high low))))

(define (distance-string s1 s2)
  (levenshtein s1 s2))

(define (distance-string-case-insensitive s1 s2)
  (levenshtein (string-downcase s1) (string-downcase s2)))

(define (score-affinity c1 c2)
  (let ((dist (distance-citation c1 c2)))
    (norm-eq-log dist 0 5)))

(define (score-repulsion c1 c2)
  (let ((dist (distance-citation c1 c2)))
    (greater-log 20 dist 3)))

(define factor-repulsion
  (make-factor (lambda (c1 c2) (score-repulsion c1 c2))))

(define factor-citation-paper
  (make-factor-annealed (lambda (c1 p1)
                          (score-affinity c1 p1)
                          )))

(define (get-initial s1)
  (if (= 0 (string-length s1))
    ""
    (car (string->list s1))))

;; "" vs ""     d = 0
;; "" vs "xfsf" d = 4
;; "" vs "E"    d = 5
;; "X" vs "E"   d = 5

(define (distance-firstname n1 n2) 
  (let ((length-n1 (string-length n1))
        (length-n2 (string-length n2))
        )
    (if (and (= 0 length-n1) (= 0 length-n2)) 
      0
      (if (or (= 1 length-n1) (= 1 length-n2)) 
        (let ((initial-n1 (get-initial n1))
              (initial-n2 (get-initial n2))
              )
          (if (eq? initial-n1 initial-n2) 0 (max (string-length n1) (string-length n2) 5))
          )
        (distance-string n1 n2)
        )
      )
    )
  )

(define (distance-middlename n1 n2) (distance-firstname n1 n2))
(define (distance-lastname n1 n2) (distance-string n1 n2))


(define (distance-author a1 a2)
  (let* (
         (dist-firstname (distance-firstname (author-as-cited->firstname a1) (author-as-cited->firstname a2)))
         (dist-middlename  (distance-middlename (author-as-cited->middlename a1) (author-as-cited->middlename a2)))
         (dist-lastname  (distance-lastname (author-as-cited->lastname a1) (author-as-cited->lastname a2)))
         (ans (+ dist-firstname dist-middlename dist-lastname))
         )
    ans)
  )

(define (string-length-authors authors)
  (apply + (map string-length-authors authors)))

(define (distance-citation c1 c2)
  (begin
    (if (not (= (citation->num-obs-authors c1) (citation->num-obs-authors c2))) 
      (max (string-length-authors (citation->obs-authors c1)) (string-length-authors (citation->obs-authors c2)))
      (+ (apply + (map distance-author (citation->obs-authors c1) (citation->obs-authors c2))) (distance-string-case-insensitive (citation->obs-title c1) (citation->obs-title c2)))
      )
    )
  )

(define (sample-paper-title)
  (let*(
        (total-length (length title-sets))
        (sampled-id (sample-integer total-length))
        (selected-title (list-ref title-sets sampled-id))
        (obs-citation-title selected-title))
    obs-citation-title
    )
  )

(define (sample-paper-authors)
  (let*((total-length (length author-sets))
        (sampled-id (sample-integer total-length))
        (selected-authors (list-ref author-sets sampled-id))
        (obs-citation-authors (map parse-author selected-authors)))
    obs-citation-authors
    )
  )

(define (sample-paper)
  (let* (
         (authors (sample-paper-authors))
         (title (sample-paper-title))
         (pub-type '("default"))
         (num-authors (length authors))
         )
    (make-paper num-authors authors title pub-type '() 0)
    )  
  )

;;; Citation Graphical Model

;;DEBUG
;;(define citation1 
;;  (parse-citation (car all-citations) 0))
;;(define citation2 
;;  (parse-citation (cadr all-citations) 1))
;;(begin 
;;  (display 'distance)
;;  (display (distance-citation citation1 citation2))
;;  (display 'author-list1)
;;  (display (citation->obs-authors citation1))
;;  (display 'author-list2)
;;  (display (citation->obs-authors citation2))
;;  (display 'author-distance)
;;  (display (map distance-author (citation->obs-authors citation1) (citation->obs-authors citation2)))
;;  (display 'title1)
;;  (display (citation->obs-title citation1))
;;  (display 'title2)
;;  (display (citation->obs-title citation2))
;;  (display 'title-distance)
;;  (display (distance-string (citation->obs-title citation1) (citation->obs-title citation2)))
;;  (display 'score)
;;  (display (greater-log 20 (distance-citation citation1 citation2) 1))
;;  (list 'haha)
;;  )
;;

;;(enable-larj-debug)

(define (db x) '())

;; (define (sample-paper-idS)
;;   (sample-integerS 20))

(for-each display
        (mh-query 100 10
        ;;(larj-mh-query-proposal-count 3000 1 200

        ;; maybe have paper id be structural
        ;; (define paper-id-distribution (DPmemS 1.2 (lambda () (sample-paper-idS))))
        ;; (define citation->paper-id
        ;;   (mem (lambda (o) (paper-id-distribution))))
        ;; (define unique-paper-ids (delete-duplicates (map citation->paper-id citations)))
        ;; (define papers (map (lambda (id) (list id (sample-paper))) unique-paper-ids))
        ;; (define paper-citation-factors
        ;;   (map (lambda (c1)
        ;;          (factor-citation-paper c1 (assoc (citation->paper-id c1) papers)))
        ;;        citations))

                    (define paper-distribution (DPmemS 1.2 (lambda () (sample-paper))))
                    (define citation->paper 
                      (mem (lambda (object) (paper-distribution))))
                    (define (print-citation->paper object)
                      (begin  
                        (db (citation->paper-id object))
                        (db (paper->title (citation->paper object)))
                        (db (citation->obs-title object))
                        (citation->paper object)
                        )
                      )
                    (define citation-assignment
                      (map (lambda (c) (list (print-citation->paper c) c)) citations))
                    (define paper-assignment
                      (delete-duplicates (map print-citation->paper citations))
                      )
                    (define x
                      (let* (
                             [paper-paper-replusion (map (lambda (p1p2) (factor-repulsion (first p1p2) (second p1p2))) (pairs paper-assignment))]
                             [paper-citation-factors (map 
                                                       (lambda (c1) 
                                                         (begin
                                                           (factor-citation-paper (second c1) (first c1)))
                                                         ) 
                                                       citation-assignment)]
                             [void2 (db (length paper-assignment))]
                             [void (db '===============end-sample)]
                             )
                        (list 
                          (length paper-assignment) 
                          paper-assignment 
                          ;;(map (lambda (c1) (list (citation->paper-id (second c1)) (paper->title (citation->paper (second c1))))) citation-assignment)
                          (map (lambda (c1 score1) 
                                 (list 
                                   (citation->paper-id (second c1)) 
                                   (list (paper->title (citation->paper (second c1)))) 
                                   (list (citation->obs-title (second c1)))
                                   score1)) 
                               citation-assignment paper-citation-factors)
                          (apply + paper-citation-factors)
                          paper-paper-replusion
                          (+ (apply + paper-citation-factors) (apply + paper-paper-replusion))
                          )))
                    x
                    true
                    ))

