;;;;; @Package     levenshtein
;;; @Subtitle    Levenshtein Distance Metric in Scheme
;;; @HomePage    http://www.neilvandyke.org/levenshtein-scheme/
;;; @Author      Neil Van Dyke
;;; @Version     0.6
;;; @Date        2009-03-14
;;; @PLaneT      neil/levenshtein:1:3

(define (identity* x) x)

(define (string-empty?* v) (zero? (string-length v)))
(define (vector-empty?* v) (zero? (vector-length v)))

(define (string->vector* s)
  (list->vector (string->list s)))

(define (vector-levenshtein/predicate/get-scratch a b pred get-scratch)
  (let ((a-len (vector-length a))
        (b-len (vector-length b)))
    (cond ((zero? a-len) b-len)
          ((zero? b-len) a-len)
          (else
            (let ((w    (get-scratch (+ 1 b-len)))
                  (next #f))
              (let fill ((k b-len))
                (vector-set! w k k)
                (or (zero? k) (fill (- k 1))))
              (let loop-i ((i 0))
                (if (= i a-len)
                  next
                  (let ((a-i (vector-ref a i)))
                    (let loop-j ((j   0)
                                 (cur (+ 1 i)))
                      (if (= j b-len)
                        (begin (vector-set! w b-len next)
                               (loop-i (+ 1 i)))
                        ;; TODO: Make these costs parameters.
                        (begin (set! next (min (+ 1 (vector-ref w (+ 1 j)))
                                               (+ 1 cur)
                                               (if (pred a-i
                                                         (vector-ref b j))
                                                 (vector-ref w j)
                                                 (+ 1 (vector-ref w j)))))
                               (vector-set! w j cur)
                               (loop-j (+ 1 j) next))))))))))))

(define (vector-levenshtein/predicate a b pred)
  (vector-levenshtein/predicate/get-scratch a b pred make-vector))

(define (vector-levenshtein/eq    a b)
  (vector-levenshtein/predicate a b eq?))
(define (vector-levenshtein/eqv   a b)
  (vector-levenshtein/predicate a b eqv?))
(define (vector-levenshtein/equal a b)
  (vector-levenshtein/predicate a b equal?))

(define (vector-levenshtein a b) (vector-levenshtein/equal a b))

(define (list-levenshtein/predicate a b pred)
  (cond ((null? a) (length b))
        ((null? b) (length a))
        (else (vector-levenshtein/predicate (list->vector a)
                                            (list->vector b)
                                            pred))))

(define (list-levenshtein/eq    a b) (list-levenshtein/predicate a b eq?))
(define (list-levenshtein/eqv   a b) (list-levenshtein/predicate a b eqv?))
(define (list-levenshtein/equal a b) (list-levenshtein/predicate a b equal?))

(define (list-levenshtein       a b) (list-levenshtein/equal     a b))


(define (string-levenshtein a b)
  ;; TODO: Maybe make a version that doesn't convert to vectors but also
  ;;       doesn't do lots of string-refs.
  (cond ((zero? (string-length a)) (string-length b))
        ((zero? (string-length b)) (string-length a))
        (else (vector-levenshtein/eqv
                (string->vector* a)
                (string->vector* b)))))

(define (string-levenshtein/predicate* a b pred)
  (cond ((zero? (string-length a)) (string-length b))
        ((zero? (string-length b)) (string-length a))
        (else (vector-levenshtein/predicate
                (string->vector* a)
                (string->vector* b)
                pred))))


(define levenshtein/predicate
  ;; TODO: Change this to a let-syntax.
  (let ((foo (lambda (a b pred a-emp a-len a-vec)
               (let ((bar (lambda (b-emp b-len b-vec)
                            (if (b-emp b)
                              (a-len a)
                              (vector-levenshtein/predicate (a-vec a)
                                                            (b-vec b)
                                                            pred)))))
                 (cond ((vector? b) (bar vector-empty?*
                                         vector-length
                                         identity*))
                       ((string? b) (bar string-empty?*
                                         string-length
                                         string->vector*))
                       ((list?   b) (bar null? length list->vector))
                       (else (error "term 2 must be vector, list, or string:"
                                    b)))))))
    (lambda (a b pred)
      (cond ((vector? a) (if (vector? b)
                           (vector-levenshtein/predicate a b pred)
                           (foo a b pred
                                vector-empty?*
                                vector-length
                                identity*)))
            ((string? a) (if (string? b)
                           (string-levenshtein/predicate*
                             a b pred)
                           (foo a b pred
                                string-empty?*
                                string-length
                                string->vector*)))
            ((list?   a) (if (list? b)
                           (list-levenshtein/predicate a b pred)
                           (foo a b pred null? length list->vector)))
            (else (error "term 1 must be vector, list, or string:" a))))))


(define (levenshtein a b)
  (if (and (string? a) (string? b))
    (string-levenshtein a b)
    (levenshtein/predicate a b equal?)))




;;; Citation Classes
;;; class: author-as-cited

(define make-author-as-cited list)              ;;not actual authors, this is the author name appeared in citation
(define author-as-cited->firstname first)
(define author-as-cited->middlename second)
(define author-as-cited->lastname third)

(define (parse-author author)
  (let* (
         (firstname (first author))
         (middlename (second author))
         (lastname (third author))
         )
    (make-author-as-cited firstname middlename lastname)))

(define (parse-authors authors-as-cited)
  (map parse-author authors-as-cited) 
  )


;;; class: paper
(define make-paper list)
(define paper->num-authors first)      
(define paper->authors second) 
(define (paper->title p)
  (car (third p)))      
(define paper->pub-type fourth)
(define paper->text fifth)
(define paper->paper-id sixth)

;;; class: citation

(define make-citation list)
(define citation->num-obs-authors first)      
(define citation->obs-authors second) 
(define (citation->obs-title c)
  (car (third c)))      
(define citation->obs-pub-type fourth)      
(define citation->text fifth)
(define citation->id sixth)

(define (parse-citation obs-citation default-id)
  (let* (
         (obs-authors (parse-authors (first obs-citation)))
         (obs-title (second obs-citation))
         (obs-pub-type '("default"))
         (num-obs-authors (length obs-authors))
         (paper-id default-id)
         )
    (make-citation num-obs-authors obs-authors obs-title obs-pub-type '() paper-id)
    ))



;;; Citation Data

(define all-citations '(
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate versus univariate decision trees")     )
                        ((("Carla" "E" "Brodley") ("Paul" "E" "Utgoff")) ("Multivariate versus univariate decision trees")     )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate versus univariate decision trees   Coins")     )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate Versus Univariate Decision Trees")    )
                        ((("C" "E" "Brodley") ("P" "E" "Ut-goff")) ("Multivariate versus univariate decision trees")     )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate Versus Univariate Decision Trees")    )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Goal-directed Classification Using Linear Machine Decision Trees")   )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Goal-directed Classification Using Linear Machine Decision Trees")   )
                        ((("C" "E" "Brodley") ("P" "E" "Ut-goff")) ("Goal-directed Classification Using Linear Machine Decision Trees")    )
                        ((("Carla" "E" "Brodley") ("Paul" "E" "Utgoff")) ("Multivariate decision trees")     )
                        ((("Carla" "E" "Brodley") ("Paul" "E" "Utgoff")) ("Multivariate decision trees")     )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate decision trees")  )
                        ((("A" "B" "Brodley") ("P" "E" "Utgoff")) ("Multivariate versus univariate decision trees")     )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate decision trees")      )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate Decision Trees")   )
                        ((("Carla" "E" "Brodley") ("Paul" "E" "Utgoff")) ("Multivariate decision trees")      )
                        ((("C" "E" "Brodley") ("P" "E" "Utgoff")) ("Multivariate decision trees")    )
                        ((("C" "" "Brodley") ("P" "" "Utgoff")) ("Multivriate Decision Trees")  )
                        ((("J" "P" "Callan") ("P" "E" "Utgoff")) ("A Transformational Approach to Constructive Induction")     )
                        ((("J" "" "Callan") ("P" "" "Utgoff")) ("A Transformational Approach to Constructive Induction")       )
                        ((("J" "" "Callan") ("P" "" "Utgoff")) ("A transformational approach to constructive induction")     )
                        ((("J" "P" "Callan") ("P" "E" "Utgoff")) ("A transformational approach to constructive induction")     )
                        ;;((("J" "P" "Callan") ("P" "E" "Utgoff")) ("Constructive induction on domain knowl edge")      )
                        ;;((("C" "" "Cardie")) ("Using Decision Trees to Improve Case-Based Learning")        )
                        ;;((("C" "" "Cardie")) ("Using Decision Trees to Improve Case-Based Learning")        )
                        ;;((("C" "" "Cardie")) ("Using Decision Trees to Improve Case-Based Learning")        )
                        ;;((("R" "" "Caruana")) ("Multitask learning: A knowledge-based of source of inductive bias")       )
                        ;;((("Richard" "" "Caruana")) ("Multitask learning: A knowledge-based of source of inductive bias")       )
                        ;;((("R" "" "Caruana")) ("Multitask learning: A knowledge-based of source of inductive bias")       )
                        ;;((("R" "" "Caruana")) ("Multitask learning: A knowledge-based of source of inductive bias")       )
                        ;;((("Caruana" "R Multitask P E" "Utgoff")) ("Learning: A Knowledge-Based of Source of Inductive Bias.   in")      )
                        ;;((("Caruana" "R" "Multitask")) ("Learning: A Knowledge-Based of Source of Inductive Bias")      )
                        ;;((("Caruana" "R Multitask E" "Utgoff")) ("Learning: A Knowledge-Based of Source of Inductive Bias.   in")      )
                        ;;((("Caruana" "R Multitask P E" "Utgoff")) ("Learning: A Knowledge-Based of Source of Inductive Bias")       )
                        ;;((("Caruana" "R Multitask P E" "Utgoff")) ("Learning: A Knowledge-Based of Source of Inductive Bias")       )
                        ;;((("D" "" "Chapman")) ("Planning for conjunctive goals")     )
                        ;;((("D" "" "Chapman")) ("Planning for conjunctive goals")     )
                        ;;((("D" "" "Chapman")) ("Vision instruction and action")    )
                        ;;((("D" "" "Chapman")) ("Vision instruction and action")    )
                        ;;((("D" "" "Chapman")) ("Vision instruction and action")    )
                        ;;((("P" "" "Clark") ("S" "" "Matwin")) ("Using Qualitative Models to Guide Inductive Learning")     )
                        ;;((("A" "" "Cleeremans") ("D" "" "Servan-Schreiber") ("J" "" "McClelland")) ("Finite state automata and simple recurrent networks")     )
                        ;;((("J" "A" "Clouse") ("Utgoff" "P E Learning Ed D" "Sleeman") ("P" "" "Edwards")) ("A Teaching Method for Reinforcement Learning")     )
                        ;;((("J" "A" "Clouse") ("P" "E" "Utgoff")) ("A teaching method for reinforcement learning")      )
                        ;;((("J" "A" "Clouse") ("P" "E" "Utgoff")) ("A teaching method for reinforcement learning")      )
                        ;;((("J" "" "Clouse") ("P" "" "Utgoff")) ("A teaching method for reinforcement learning")     )
                        ;;((("J" "" "Clouse") ("P" "" "Utgoff")) ("A teaching method for reinforcement learning")    )
                        ))
(define author-sets 
  (delete-duplicates (map car all-citations)))

(define title-sets 
  (delete-duplicates (map cadr all-citations)))

(define author-title-sets
  (delete-duplicates all-citations))

(define (initialization all-citations)
  (map  parse-citation all-citations (iota (length all-citations))))

(define citations 
  (initialization all-citations))


;;; Utility functions
;;;
(define (randintS low high)
  (+ low (sample-integerS (- high low))))

(define (randint low high)
  (+ low (sample-integer (- high low))))

(define (distance-string s1 s2)
  (levenshtein s1 s2))

(define (distance-string-case-insensitive s1 s2)
  (levenshtein (string-downcase s1) (string-downcase s2)))

(define (score-affinity c1 c2)
  (let ((dist (distance-citation c1 c2)))
    ;; (display 'in-score-affinity)
    ;; (display dist)
    ;; (display c1)
    ;; (display 'citation2)
    ;; (display c2)
    ;; (display (norm-eq-log dist 0 1))
    ;; (display (norm-eq-log dist 0 10))
    ;; (display (norm-eq-log dist 0 50))
    ;; (display (norm-eq-log dist 0 100))
    (norm-eq-log dist 0 100)
    )
  )

(define (score-repulsion c1 c2)
  (let ((dist (distance-citation c1 c2)))
    (greater-log 10 dist 1)))

;; question:
;; compares title only?
;; or when sample paper, we should only use the same pair of author-title
(define (score-repulsion-title c1 c2)
  (let ((dist (distance-citation-title c1 c2)))
    ;;(db 'in-score-repulsion)
    ;;(db 'c1)
    ;;(db c1)
    ;;(db 'c2)
    ;;(db c2)
    ;; (display 'in-score-repulsion-dist=)
    ;; (display dist)
    ;; (display 'c1)
    ;; (display c1)
    ;; (display 'c2)
    ;; (display c2)
    ;; (display (greater-log 10 dist 10))
    ;; (display (greater-log 10 dist 5))
    ;; (display (greater-log 10 dist 1))
    (greater-log 10 dist 1)))

(define factor-repulsion
  (begin
  (make-factor (lambda (c1 c2) (score-repulsion-title c1 c2)))
  ))

(define factor-citation-paper
  (begin
    (db 'in-factor-citation-paper)
    (db 'citation)
  (make-factor (lambda (c1 p1)
                          (score-affinity c1 p1)
                          ))
  ))

(define (get-initial s1)
  (if (zero? (string-length s1))
    ""
    (car (string->list s1))))

;; "" vs ""     d = 0
;; "" vs "xfsf" d = 4
;; "" vs "E"    d = 5
;; "X" vs "E"   d = 5

(define (distance-firstname n1 n2) 
  (let ((length-n1 (string-length n1))
        (length-n2 (string-length n2))
        )
    (if (and (zero? length-n1) (zero? length-n2)) 
      0
      (if (or (= 1 length-n1) (= 1 length-n2)) 
        (let ((initial-n1 (get-initial n1))
              (initial-n2 (get-initial n2))
              )
          (if (eq? initial-n1 initial-n2) 0 (max (string-length n1) (string-length n2) 5))
          )
        (distance-string n1 n2)
        )
      )
    )
  )

(define (distance-middlename n1 n2) 
  (let ((length-n1 (string-length n1))
        (length-n2 (string-length n2))
        )
    (if (or (zero? length-n1) (zero? length-n2)) 
      0
      (if (or (= 1 length-n1) (= 1 length-n2)) 
        (let ((initial-n1 (get-initial n1))
              (initial-n2 (get-initial n2))
              )
          (if (eq? initial-n1 initial-n2) 0 (max (string-length n1) (string-length n2) 5))
          )
        (distance-string n1 n2)
        )
      )
    )
  )

(define (distance-lastname n1 n2) (distance-string n1 n2))


(define (distance-author a1 a2)
  (let* (
         (dist-firstname (distance-firstname (author-as-cited->firstname a1) (author-as-cited->firstname a2)))
         (dist-middlename  (distance-middlename (author-as-cited->middlename a1) (author-as-cited->middlename a2)))
         (dist-lastname  (distance-lastname (author-as-cited->lastname a1) (author-as-cited->lastname a2)))
         (ans (+ dist-firstname dist-middlename dist-lastname))
         )
    ans)
  )

(define (string-length-author author)
  (begin
    (+ (string-length (author-as-cited->firstname author)) (string-length (author-as-cited->middlename author)) (string-length (author-as-cited->lastname author)))
    ))


(define (string-length-authors authors)
  (begin 
    (apply + (map string-length-author authors))
    ))

(define (distance-citation-title c1 c2)
  (begin
      (distance-string-case-insensitive (citation->obs-title c1) (citation->obs-title c2))
    )
  )

(define (distance-citation c1 c2)
  (begin
    (if (not (= (citation->num-obs-authors c1) (citation->num-obs-authors c2))) 
      (max (string-length-authors (citation->obs-authors c1)) (string-length-authors (citation->obs-authors c2)))
      (+ (apply + (map distance-author (citation->obs-authors c1) (citation->obs-authors c2))) (distance-string-case-insensitive (citation->obs-title c1) (citation->obs-title c2)))
      )
    )
  )

(define (rnd-select xs)
  (let* ([total-length (length xs)]
         [sampled-id (sample-integer total-length)]
         [selected (list-ref xs sampled-id)])
    selected))

(define (sample-paper-title-author)
  (rnd-select author-title-sets))

(define (sample-paper-title)
  (rnd-select title-sets))

(define (sample-paper-authors)
  (rnd-select author-sets))

(define (sample-paper)
  (let* ([authors-title (sample-paper-title-author)]
         (authors (first authors-title))
         (title (second authors-title))
         (pub-type '("default"))
         (num-authors (length authors)))
    (make-paper num-authors authors title pub-type '())))

;;; Citation Graphical Model

;;DEBUG
;;(define citation1 
;;  (parse-citation (car all-citations) 0))
;;(define citation2 
;;  (parse-citation (cadr all-citations) 1))
;;(begin 
;;  (display 'distance)
;;  (display (distance-citation citation1 citation2))
;;  (display 'author-list1)
;;  (display (citation->obs-authors citation1))
;;  (display 'author-list2)
;;  (display (citation->obs-authors citation2))
;;  (display 'author-distance)
;;  (display (map distance-author (citation->obs-authors citation1) (citation->obs-authors citation2)))
;;  (display 'title1)
;;  (display (citation->obs-title citation1))
;;  (display 'title2)
;;  (display (citation->obs-title citation2))
;;  (display 'title-distance)
;;  (display (distance-string (citation->obs-title citation1) (citation->obs-title citation2)))
;;  (display 'score)
;;  (display (greater-log 20 (distance-citation citation1 citation2) 1))
;;  (list 'haha)
;;  )
;;


(define (sample-paper-idS)
  (sample-integerS 20))



;;Model 1: paper-citation
;;
(define (db x) '())
;;(enable-larj-log)
;;(enable-larj-stats)
;;(enable-larj-debug)
;;(enable-prov-debug)

(for-each display
          ;;(mh-query 100 10
                    (larj-mh-query-proposal-count 10000 1 100
                    ;; maybe have paper id be structural
                     (define paper-id-distribution (DPmemS 0.8 gensym))
                     (define citation->paper-id-mem
                       (mem (lambda (o) (paper-id-distribution))))
                     (define unique-paper-ids (delete-duplicates (map citation->paper-id-mem citations)))
                    (define x
                      (let* (
                             (papers (map (lambda (id) (list id (sample-paper))) unique-paper-ids))
                             (paper->paper-id-mem (lambda (p) (first p)))
                             (paper->paper-entity (lambda (p) (second p)))
                             (citation->paper (lambda (c1) (second (assoc (citation->paper-id-mem c1) papers))))
                             (citation->paper-pair (lambda (c1) (assoc (citation->paper-id-mem c1) papers)))
                             (paper->citations 
                               (lambda (p1) 
                                 (filter 
                                   (lambda (c) (eq? (paper->paper-id-mem (citation->paper-pair c)) (paper->paper-id-mem p1))) citations)))
                             ;;(paper-citation-factors
                             ;;  (map (lambda (c1)
                             ;;         (factor-citation-paper c1 (citation->paper c1)))
                             ;;       citations))
                             (paper-citation-factors
                               (begin 
                                 (db 'start-paper-citation-factors)
                               (map (lambda (p1)
                                      (begin
                                             (db 'in-make-paper-citation-factors)
                                             (db (paper->paper-id-mem p1))
                                             (db (map citation->id (paper->citations p1)))
                                      (map (lambda (c1) 
                                             (factor-citation-paper c1 (paper->paper-entity p1))

                                             ) (paper->citations p1))))
                                    papers)))
                             (paper-paper-factors
                               (map (lambda (p1p2) 
                                      (factor-repulsion (second (first p1p2)) (second (second p1p2)))) 
                                    (pairs papers)))
                             )
                        (list 
                          (length unique-paper-ids) 
                          papers
                          (map (lambda (p1 scorelist)
                                 (list 
                                   (paper->title (paper->paper-entity p1))
                                   (map (lambda (c1 score1) (list (citation->obs-title c1) score1)) (paper->citations p1) scorelist)
                                   )
                                 ) 
                               papers paper-citation-factors)
                          paper-paper-factors
                          ;;(sum (map sum paper-paper-factors))
                          ;;
                          ;;(map (lambda (c1 score1)
                          ;;       (list
                          ;;         (citation->paper-id-mem c1)
                          ;;         (list (paper->title (citation->paper c1)))
                          ;;         (list (citation->obs-title c1))
                          ;;         score1))
                          ;;       citations paper-citation-factors)
                          ;;(apply + paper-citation-factors)
                          ;;paper-paper-factors
                          ;;(+ (apply + paper-citation-factors) (apply + paper-paper-factors))
                          )
                        ))
                    x
                    (>= (length unique-paper-ids) 2)))

