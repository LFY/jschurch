;; Representing record types (Table, Plate) as lists============================

(define (make-plate pos size table)
  (list pos size table))
(define plate-position first)
(define plate-size second)
(define plate-table third)

(define (make-table size num-plates)
  (list size num-plates))
(define table-size first)
(define table-num-plates second)

;; Utility functions for computing geometric quantities=========================

(define (plate-area plate)
  (* my-pi (* (plate-size plate) (plate-size plate))))

(define (total-area plates)
  (apply + (map plate-area plates)))

(define (table-area table)
  (* my-pi (* (table-size table) (table-size table))))

(define (vec-dist xy1 xy2)
  (let* ([x (list-ref xy1 0)]
         [y (list-ref xy1 1)]
         [z (list-ref xy2 0)]
         [w (list-ref xy2 1)])
    (expt (+ (expt (- x z) 2) (expt (- y w) 2)) 0.5)))

(define (dist-from-origin xy)
  (vec-dist xy (list 0 0)))

(define (circular-area r)
  (* my-pi (expt r 2)))

;; A scoring function
(define (area-outside-table plate)
  (let* ([d (dist-from-origin (plate-position plate))]
         [table-limit (table-size (plate-table plate))]
         [difference (max 0 (- d table-limit))])
    (circular-area difference)))

;; A scoring function
(define (overlap-area p1 p2)
  (let* ([dist-between (vec-dist (plate-position p1) (plate-position p2))]
         [overlap-amt (max 0 (- (+ (plate-size p1) (plate-size p2)) dist-between))])
    (circular-area overlap-amt)))

;; Functions to perform forward sampling========================================

(define (randint low high)
  (+ low (sample-integer (- high low))))

(define (sample-table)
  (let* ([num-plates (randint 1 10)]
         [table-size (uniform 15 25)])
    (make-table table-size num-plates)))

(define (sample-plate table)
  (let* ([posx (uniform -10 10)]
         [posy (uniform -10 10)]
         [plate-size (uniform 0.1 2.0)])
    (make-plate (list posx posy) plate-size table)))

;; The open-universe model over table/plate layouts=============================
(define (tables-and-plates)
  (let* ([table (sample-table)] ;; Sample a table, then
         ;; Sample a varying number of plates based on the table sample
         [plates (map (lambda (i) (sample-plate table)) (iota (table-num-plates table)))]
         ;; Apply the occupy-area factor (has side effect of constraining the distribution)
         [occupy-area (softeq 0.7 (/ (total-area plates) (table-area table)))]
         ;; Apply inside factor
         [inside (map (lambda (p) (softeq 0.0 (area-outside-table p))) plates)]
         ;; Apply non-overlap factor
         [non-overlap (map (lambda (pq) (softeq 0.0 (overlap-area (first pq) (second pq)))) (pairs plates))])
    ;; Return the score of the constraints along with the sampled table and plates
    (list (apply + (list occupy-area (apply + inside) (apply + non-overlap))) table plates)))

;; Run MH for 10k samples (100 samples to return * 100 samples between returns)
(for-each display
          (mh-query 100 100
                    (define asn (tables-and-plates))
                    (list 'score (car asn) 'num-plates (table-num-plates (cadr asn)))
                    true))

