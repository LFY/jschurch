(define (make-plate pos size table)
  (list pos size table))
(define plate-position first)
(define plate-size second)
(define plate-table third)

(define (make-table size num-plates)
  (list size num-plates))
(define table-size first)
(define table-num-plates second)

(define (consec-2 xs)
  (letrec ([loop (lambda (acc xs)
                   (cond [(null? (cdr xs)) (reverse acc)]
                         [else
                           (loop (cons (list (car xs) (cadr xs)) acc) (cdr xs))]))])
    (loop '() xs)))

(define my-pi 3.414592653589793238)

(define (gauss-log-pdf mean var smp)
  (let ([diff (- smp mean)])
    (- 
      (- (/ (* diff diff) (* 2.0 var)))
      (* 0.5 (+ (log 2) (log my-pi) (log var)))
      )))

(define (norm-gauss-log-pdf mean var smp)
  (- (gauss-log-pdf mean var smp) (gauss-log-pdf mean var mean)))

(define (softeq x y) (norm-gauss-log-pdf x 0.1 y))

(define (plate-area plate)
  (* my-pi (* (plate-size plate) (plate-size plate))))

(define (total-area plates)
  (apply + (map plate-area plates)))

(define (table-area table)
  (* my-pi (* (table-size table) (table-size table))))

(define (vec-dist xy1 xy2)
  (let* ([x (list-ref xy1 0)]
         [y (list-ref xy1 1)]
         [z (list-ref xy2 0)]
         [w (list-ref xy2 1)])
    (expt (+ (expt (- x z) 2) (expt (- y w) 2)) 0.5)))

(define (dist-from-origin xy)
  (vec-dist xy (list 0 0)))

(define (circular-area r)
  (* my-pi (expt r 2)))

(define (area-outside-table plate)
  (let* ([d (dist-from-origin (plate-position plate))]
         [table-limit (table-size (plate-table plate))]
         [difference (max 0 (- d table-limit))])
    (circular-area difference)))

(define (overlap-area p1 p2)
  (let* ([dist-between (vec-dist (plate-position p1) (plate-position p2))]
         [overlap-amt (max 0 (- (+ (plate-size p1) (plate-size p2)) dist-between))])
    (circular-area overlap-amt)))

(define (select-k-subsets n l)
  (letrec ([loop (lambda (l ln n prev-els accum)
                   (cond
                     ((<= n 0) (cons prev-els accum))
                     ((< ln n) accum)
                     ((= ln n) (cons (append l prev-els) accum))
                     ((= ln (+ 1 n)) 
                      (letrec ([fold (lambda (l seen accum)
                        (if (null? l) accum
                          (fold (cdr l) (cons (car l) seen)
                                (cons
                                  (append (cdr l) seen)
                                  accum))))])
                        (fold l prev-els accum)))
                     ((= n 1)
                      (letrec ([fold (lambda (l accum)
                        (if (null? l) accum
                          (fold (cdr l) (cons (cons (car l) prev-els) accum))))])
                        (fold l accum)))
                     (else
                       (loop (cdr l) (- ln 1) n prev-els
                             (loop (cdr l) (- ln 1) (- n 1) (cons (car l) prev-els) accum)))))])
    (loop l (length l) n '() '())))

(define (pairs xs) (select-k-subsets 2 xs))

(define (randint low high)
  (+ low (sample-integer (- high low))))

(define (sample-table)
  (let* ([num-plates (randint 1 10)]
         [table-size (uniform 15 25)])
    (make-table table-size num-plates)))

(define (sample-plate table)
  (let* ([posx (uniform -10 10)]
         [posy (uniform -10 10)]
         [plate-size (uniform 0.1 2.0)])
    (make-plate (list posx posy) plate-size table)))

(define (concatenate xss)
  (fold (lambda (x xs)
          (append x xs)) '() xss))
(define (tables-and-plates)
  (let* ([table (sample-table)]
         [plates (map (lambda (i) (sample-plate table)) (iota (table-num-plates table)))]
         [occupy-area (softeq 0.7 (/ (total-area plates) (table-area table)))]
         [inside (map (lambda (p) (softeq 0.0 (area-outside-table p))) plates)]
         [non-overlap (map (lambda (pq) (softeq 0.0 (overlap-area (first pq) (second pq)))) (pairs plates))])
    (list (apply + (list occupy-area (apply + inside) (apply + non-overlap)) table plates))))

(for-each display
          (mh-query 100 100
                    (define asn (tables-and-plates))
                    (car asn)
                    true))

