(define (scope-head-or-second xs) 
  (if (even? (length xs))
    (list (car xs))
    (list (cadr xs))
    ))

(define tf-force-0
  (make-factor (lambda (x) 
                 (if (= x 1)
                   (log 0.0005)
                   0.0))))

(define tf-alternate
  (make-factor-annealed (lambda (x y)
                 (if (= x y)
                   (log 0.0005)
                   0.0))))

(define (randintS low high)
  (+ low (sample-integerS (- high low))))

(for-each display 
          (larj-mh-query-proposal-count 100000 1 50
          ;;(mh-query 100000 1
                    (define x
                      (let* ([num-vals (randintS 5 10)]
                             [vals (repeat num-vals (lambda () (if (flip) 1 0)))]
                             [constraints (map (lambda (xy) (tf-alternate (first xy) (second xy))) (bi-gram vals))]
                             ;;[force-0-constraints (map (lambda (x) (tf-force-0 x)) (scope-head-or-second vals))])
                             [force-0-constraints (if (even? (length vals))
                                                    (tf-force-0 (car vals))
                                                    (tf-force-0 (cadr vals)))])
                        vals))
                    x
                    true))
