(define (scope-all xs) (list xs))

(define (even? x)
  (= (modulo x 2) 0))

(define (is-one? x)
  (= x 1))

(define (is-zero? x)
  (= x 0))

(define (norm-eq-log x y var)
  (norm-gauss-log-pdf (- x y) var 0.0))

(define (randintS low high)
  (+ low (sample-integerS (- high low))))

(define tf-global-even-odd
  (make-factor (lambda (xs)
                 (if (even? (length xs))
                     (norm-eq-log (length (filter is-one? xs)) (length xs) 0.1)
                     (norm-eq-log (length (filter is-zero? xs)) (length xs) 0.1)))))

(define tf-global-even
  (make-factor (lambda (xs)
                 (norm-eq-log (length (filter is-one? xs)) (length xs) 0.1))))

(define tf-global-odd
  (make-factor (lambda (xs)
                 (norm-eq-log (length (filter is-zero? xs)) (length xs) 0.1))))

(define tf-global-even-odd-annealable 
  (lambda (xs)
    (if (even? (length xs))
      (tf-global-even xs)
      (tf-global-odd xs))))

(for-each display 
          (larj-mh-query-proposal-count 100000 1 100
          ;;(larj-mh-query 300 1 50
          ;;(mh-query 100000 1
                         (define x
                           (let* ([num-vals (randintS 5 12)]
                                  ;;[void (display 'num-vals)]
                                  ;;[void2 (display num-vals)]
                                  [vals (repeat num-vals (lambda () (if (flip) 1 0)))]
                                  ;;[void (display 'the-state-is)]
                                  ;;[void2 (display vals)]
                                  [constraints (map (lambda (xs) (tf-global-even-odd-annealable xs)) (scope-all vals))])
                             vals))
                         x
                         true))
