
(define softeq-discrete2
  (make-factor (lambda (x y)
                 (let* ([res (= x y)])
                   (if res 0.0 (log 0.1))))))

(define (randintS low high)
  (+ low (sample-integerS (- high low))))

(define (consec-2 xs)
  (letrec 
    ([loop (lambda (acc xs)
             (cond [(null? (cdr xs)) (reverse acc)]
                   [else
                     (loop (cons (list (car xs) (cadr xs)) acc) (cdr xs))]))])
    (loop '() xs)))

(for-each display 
          (larj-mh-query 50 300 20
                    (define x
                      (let* ([num-vals (randintS 5 10)]
                             [vals (repeat num-vals (lambda () (if (flip) 1 0)))]
                             [constraints (map (lambda (xy) (softeq-discrete2 (first xy) (second xy))) (consec-2 vals))])
                        vals))
                    x
                    true))


